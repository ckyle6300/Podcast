{"version":3,"file":"static/js/325.b89103b3.chunk.js","mappings":"2MAmBMA,EAAS,WACb,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MA0BjB,OAxBAC,EAAAA,EAAAA,YAAU,WACR,IAcIC,EAdEC,EAAM,mCAAG,sGACMC,MAAM,GAAD,OACnBC,2CADmB,mBAEtB,CACEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,OAAQhB,MANtB,cACPiB,EADO,gBASYA,EAAKC,OATjB,OASPC,EATO,OAWbhB,EAAYgB,EAAWC,OAXV,2CAAH,qDAoBZ,OAJIpB,EAAWqB,QAAU,IACvBd,EAAce,WAAWd,EAAQ,MAG5B,kBAAMe,aAAahB,MACzB,CAACP,EAAYI,KAGd,UAAC,KAAD,YACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAYoB,MAAM,UAAUC,UAAU,kBAAtC,WACE,SAAC,KAAD,CAAYC,KAAK,QAAjB,UACE,SAAC,KAAD,OAEF,SAAC,KAAD,oCAGJ,SAAC,KAAD,CAAYF,MAAM,YAAlB,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAQC,UAAU,kBAAlB,UACE,SAAC,KAAD,CAAQE,OAAO,IAAIC,SAAS,IAA5B,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAUJ,MAAM,OAAOK,SAAS,WAAhC,qBAGA,SAAC,KAAD,CACEC,UAAW,EACXC,WAAW,EACXC,MAAOhC,EACPiC,YAAa,SAACC,GAAD,OAAOjC,EAAciC,EAAEC,OAAOH,kBAKnD,SAAC,KAAD,UACG9B,EAASkC,KAAI,SAACC,EAASC,GAAV,OACZ,SAAC,KAAD,CACEC,KAAK,IACLZ,OAAO,IAEPF,UAAU,iBAJZ,UAME,SAAC,IAAD,CACEY,QAASA,EACTG,SAAS,EACTC,QAAO,oBAAeJ,EAAQK,OAN3BJ,iBAiBrB,UAAeK,EAAAA,KAAW7C","sources":["pages/Search.js"],"sourcesContent":["import {\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonMenuButton,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n} from '@ionic/react';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card from '../components/Card';\n\nconst Search = () => {\n  const [userSearch, setUserSearch] = useState('');\n  const [podcasts, setPodcasts] = useState([]);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const getUrl = async () => {\n      const data = await fetch(\n        `${process.env.REACT_APP_BACKEND_URL}/podcast/search`,\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ search: userSearch }),\n        }\n      );\n      const parsedData = await data.json();\n\n      setPodcasts(parsedData.feeds);\n    };\n\n    let searchTimer;\n\n    if (userSearch.length >= 3) {\n      searchTimer = setTimeout(getUrl, 700);\n    }\n\n    return () => clearTimeout(searchTimer);\n  }, [userSearch, dispatch]);\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color='primary' className='ion-text-center'>\n          <IonButtons slot='start'>\n            <IonMenuButton />\n          </IonButtons>\n          <IonTitle>Search Podcasts</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent color='secondary'>\n        <IonGrid>\n          <IonRow className='ion-padding-top'>\n            <IonCol sizeSm='6' offsetSm='3'>\n              <IonItem>\n                <IonLabel color='dark' position='floating'>\n                  Search\n                </IonLabel>\n                <IonInput\n                  minlength={3}\n                  autofocus={true}\n                  value={userSearch}\n                  onIonChange={(e) => setUserSearch(e.detail.value)}\n                />\n              </IonItem>\n            </IonCol>\n          </IonRow>\n          <IonRow>\n            {podcasts.map((podcast, index) => (\n              <IonCol\n                size='6'\n                sizeSm='4'\n                key={index}\n                className='ion-no-padding'\n              >\n                <Card\n                  podcast={podcast}\n                  clicker={true}\n                  address={`/podcasts/${podcast.id}`}\n                />\n              </IonCol>\n            ))}\n          </IonRow>\n        </IonGrid>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default React.memo(Search);\n"],"names":["Search","useState","userSearch","setUserSearch","podcasts","setPodcasts","dispatch","useDispatch","useEffect","searchTimer","getUrl","fetch","process","method","headers","body","JSON","stringify","search","data","json","parsedData","feeds","length","setTimeout","clearTimeout","color","className","slot","sizeSm","offsetSm","position","minlength","autofocus","value","onIonChange","e","detail","map","podcast","index","size","clicker","address","id","React"],"sourceRoot":""}