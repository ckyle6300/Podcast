{"version":3,"file":"static/js/355.efe6b7f7.chunk.js","mappings":"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","sources":["components/EpisodeModal.js","components/Episodes.js","pages/RecentEpisodes.js"],"sourcesContent":["import React from 'react';\nimport {\n  IonAvatar,\n  IonButton,\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonIcon,\n  IonImg,\n  IonItem,\n  IonLabel,\n  IonModal,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n} from '@ionic/react';\nimport { closeOutline, playOutline } from 'ionicons/icons';\nimport parse from 'html-react-parser';\nimport { parseSecondsIntoReadableTime } from './Episodes';\n\nconst EpisodeModal = ({ isOpen, setIsOpen, buttonHandler, modalInfo }) => {\n  if (!modalInfo) {\n    return <></>;\n  }\n  const { epi, idx, podTitle } = modalInfo;\n  // use transcript\n  // useEffect(async () => {\n  //   fetch(epi.transcriptUrl)\n  //     .then((response) => response.body)\n  //     .then((rb) => {\n  //       const reader = rb.getReader();\n\n  //       return new ReadableStream({\n  //         start(controller) {\n  //           // The following function handles each data chunk\n  //           function push() {\n  //             // \"done\" is a Boolean and value a \"Uint8Array\"\n  //             reader.read().then(({ done, value }) => {\n  //               // If there is no more data to read\n  //               if (done) {\n  //                 console.log('done', done);\n  //                 controller.close();\n  //                 return;\n  //               }\n  //               // Get the data and send it to the browser via the controller\n  //               controller.enqueue(value);\n  //               // Check chunks by logging to the console\n  //               console.log(done, value);\n  //               push();\n  //             });\n  //           }\n\n  //           push();\n  //         },\n  //       });\n  //     })\n  //     .then((stream) => {\n  //       // Respond with our stream\n  //       return new Response(stream, {\n  //         headers: { 'Content-Type': 'text/html' },\n  //       }).text();\n  //     })\n  //     .then((result) => {\n  //       // Do things with result\n  //       console.log(result);\n  //     });\n  // }, []);\n\n  return (\n    <IonModal isOpen={isOpen} onDidDismiss={() => setIsOpen(false)}>\n      <IonHeader>\n        <IonToolbar color='primary'>\n          <IonTitle>{epi?.title}</IonTitle>\n          <IonButtons slot='end'>\n            <IonButton\n              fill='clear'\n              color='dark'\n              onClick={() => setIsOpen(false)}\n            >\n              close\n              <IonIcon slot='end' icon={closeOutline} />\n            </IonButton>\n          </IonButtons>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent color='secondary'>\n        <IonGrid>\n          <IonRow>\n            <IonCol>\n              <IonItem color='dark'>\n                <IonAvatar slot='start'>\n                  <IonImg src={epi.feedImage} />\n                </IonAvatar>\n                <IonLabel className='ion-text-wrap'>\n                  <p>{podTitle}</p>\n                  <h2>{epi?.title}</h2>\n                  <h3>{epi?.datePublishedPretty}</h3>\n                  {epi?.duration > 0 && (\n                    <p>{parseSecondsIntoReadableTime(epi?.duration)}</p>\n                  )}\n                </IonLabel>\n                <IonIcon\n                  slot='end'\n                  button\n                  icon={playOutline}\n                  onClick={() => buttonHandler(idx)}\n                />\n              </IonItem>\n            </IonCol>\n          </IonRow>\n          <IonRow className='ion-padding '>\n            <IonCol>{parse(epi?.description)}</IonCol>\n          </IonRow>\n        </IonGrid>\n      </IonContent>\n    </IonModal>\n  );\n};\n\nexport default React.memo(EpisodeModal);\n","import { lazy } from 'react';\nimport {\n  IonAvatar,\n  IonButton,\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonIcon,\n  IonImg,\n  IonItem,\n  IonLabel,\n  IonModal,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n} from '@ionic/react';\nimport { playOutline } from 'ionicons/icons';\nimport React from 'react';\n\nexport function parseSecondsIntoReadableTime(milliseconds) {\n  //Get hours from seconds\n  const hours = milliseconds / (60 * 60);\n  const absoluteHours = Math.floor(hours);\n  const h = absoluteHours > 9 ? absoluteHours : '0' + absoluteHours;\n\n  //Get remainder from hours and convert to minutes\n  const minutes = (hours - absoluteHours) * 60;\n  const absoluteMinutes = Math.floor(minutes);\n  const m = absoluteMinutes > 9 ? absoluteMinutes : '0' + absoluteMinutes;\n\n  //Get remainder from minutes and convert to seconds\n  const seconds = (minutes - absoluteMinutes) * 60;\n  const absoluteSeconds = Math.floor(seconds);\n  const s = absoluteSeconds > 9 ? absoluteSeconds : '0' + absoluteSeconds;\n\n  return h + ':' + m + ':' + s;\n}\n\nconst Episodes = ({ epi, buttonHandler, idx, clickHandler }) => {\n  if (epi) {\n    return (\n      <>\n        <IonItem color='dark' button={true}>\n          <IonAvatar slot='start'>\n            <IonImg src={epi.feedImage} alt='podcast photo' />\n          </IonAvatar>\n          <IonLabel\n            className='ion-text-wrap'\n            onClick={() => clickHandler(epi, idx)}\n          >\n            <h2>{epi.title}</h2>\n            <h3>{epi.datePublishedPretty}</h3>\n            {epi.duration > 0 && (\n              <p>{parseSecondsIntoReadableTime(epi.duration)}</p>\n            )}\n          </IonLabel>\n          <IonIcon\n            slot='end'\n            button\n            icon={playOutline}\n            onClick={() => buttonHandler(idx)}\n          />\n        </IonItem>\n      </>\n    );\n  } else return <></>;\n};\n\nexport default React.memo(Episodes);\n","import {\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonList,\n  IonListHeader,\n  IonLoading,\n  IonMenuButton,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n  useIonLoading,\n} from '@ionic/react';\nimport { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport EpisodeModal from '../components/EpisodeModal';\nimport Episodes from '../components/Episodes';\nimport { playEpisode, playPodcast } from '../store/podcastInfoSlice';\nimport { updateRecent } from '../store/selectedPodcast';\n\nconst RecentEpisodes = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const podList = useSelector((state) => state.localStore.podcastsRdx);\n  const podInfo = useSelector((state) => state.podcastInfo);\n  const episodes = useSelector((state) => state.selected.recentEpisodes);\n\n  const modalRef = useRef();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const getRecent = async () => {\n      let podcastIds;\n      try {\n        podcastIds = Object.keys(podList);\n      } catch (error) {\n        setError(true);\n        setLoading(false);\n        return;\n      }\n\n      await dispatch(updateRecent(podcastIds));\n      setLoading(false);\n    };\n\n    getRecent();\n\n    return () => {\n      setError(false);\n      setLoading(true);\n    };\n  }, [podList]);\n\n  const buttonHandler = async (idx) => {\n    const episode = episodes[idx];\n    const podcast = podList[episode.feedId];\n    dispatch(playPodcast(podcast, episode, podInfo.count));\n  };\n\n  const clickHandler = (epi, idx) => {\n    const episode = episodes[idx];\n    const podcast = podList[episode.feedId];\n    setIsOpen((prev) => !prev);\n    modalRef.current = {\n      epi: epi,\n      idx: idx,\n      podTitle: podcast.title,\n    };\n  };\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color='primary' className='ion-text-center'>\n          <IonButtons slot='start'>\n            <IonMenuButton />\n          </IonButtons>\n          <IonTitle>Recent Podcasts</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent color='secondary'>\n        {loading && (\n          <IonLoading\n            isOpen={loading}\n            onDidDismiss={() => setLoading(false)}\n            message={'Loading...'}\n            duration={5000}\n          />\n        )}\n        {!loading && (error || episodes == undefined) && (\n          <div className='ion-text-center ion-padding top'>\n            <h2>Subscribe to a podcast to see recent episodes.</h2>\n          </div>\n        )}\n        {!loading && !error && episodes !== undefined && (\n          <IonGrid>\n            <IonRow>\n              <IonCol sizeSm='10' offsetSm='1'>\n                <IonList className='ion-no-padding'>\n                  <IonListHeader color='dark'>\n                    <h1>Recent Episodes</h1>\n                  </IonListHeader>\n                  {episodes &&\n                    episodes.map((epi, idx) => (\n                      <Episodes\n                        key={idx}\n                        epi={epi}\n                        buttonHandler={buttonHandler}\n                        clickHandler={clickHandler}\n                        idx={idx}\n                      />\n                    ))}\n                </IonList>\n              </IonCol>\n            </IonRow>\n          </IonGrid>\n        )}\n        <EpisodeModal\n          isOpen={isOpen}\n          modalInfo={modalRef.current}\n          setIsOpen={setIsOpen}\n          buttonHandler={buttonHandler}\n        />\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default RecentEpisodes;\n"],"names":["EpisodeModal","isOpen","setIsOpen","buttonHandler","modalInfo","epi","idx","podTitle","onDidDismiss","color","title","slot","fill","onClick","icon","closeOutline","src","feedImage","className","datePublishedPretty","duration","parseSecondsIntoReadableTime","button","playOutline","parse","description","React","milliseconds","hours","absoluteHours","Math","floor","h","minutes","absoluteMinutes","m","seconds","absoluteSeconds","Episodes","clickHandler","alt","useState","loading","setLoading","error","setError","podList","useSelector","state","localStore","podcastsRdx","podInfo","podcastInfo","episodes","selected","recentEpisodes","modalRef","useRef","dispatch","useDispatch","useEffect","getRecent","podcastIds","Object","keys","updateRecent","episode","podcast","feedId","playPodcast","count","prev","current","message","undefined","sizeSm","offsetSm","map"],"sourceRoot":""}