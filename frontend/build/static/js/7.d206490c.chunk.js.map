{"version":3,"file":"static/js/7.d206490c.chunk.js","mappings":"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","sources":["components/EpisodeModal.js","components/Episodes.js","pages/PodcastInfo.js"],"sourcesContent":["import React from 'react';\nimport {\n  IonAvatar,\n  IonButton,\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonIcon,\n  IonImg,\n  IonItem,\n  IonLabel,\n  IonModal,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n} from '@ionic/react';\nimport { closeOutline, playOutline } from 'ionicons/icons';\nimport parse from 'html-react-parser';\nimport { parseSecondsIntoReadableTime } from './Episodes';\n\nconst EpisodeModal = ({ isOpen, setIsOpen, buttonHandler, modalInfo }) => {\n  if (!modalInfo) {\n    return <></>;\n  }\n  const { epi, idx, podTitle } = modalInfo;\n  // use transcript\n  // useEffect(async () => {\n  //   fetch(epi.transcriptUrl)\n  //     .then((response) => response.body)\n  //     .then((rb) => {\n  //       const reader = rb.getReader();\n\n  //       return new ReadableStream({\n  //         start(controller) {\n  //           // The following function handles each data chunk\n  //           function push() {\n  //             // \"done\" is a Boolean and value a \"Uint8Array\"\n  //             reader.read().then(({ done, value }) => {\n  //               // If there is no more data to read\n  //               if (done) {\n  //                 console.log('done', done);\n  //                 controller.close();\n  //                 return;\n  //               }\n  //               // Get the data and send it to the browser via the controller\n  //               controller.enqueue(value);\n  //               // Check chunks by logging to the console\n  //               console.log(done, value);\n  //               push();\n  //             });\n  //           }\n\n  //           push();\n  //         },\n  //       });\n  //     })\n  //     .then((stream) => {\n  //       // Respond with our stream\n  //       return new Response(stream, {\n  //         headers: { 'Content-Type': 'text/html' },\n  //       }).text();\n  //     })\n  //     .then((result) => {\n  //       // Do things with result\n  //       console.log(result);\n  //     });\n  // }, []);\n\n  return (\n    <IonModal isOpen={isOpen} onDidDismiss={() => setIsOpen(false)}>\n      <IonHeader>\n        <IonToolbar color='primary'>\n          <IonTitle>{epi?.title}</IonTitle>\n          <IonButtons slot='end'>\n            <IonButton\n              fill='clear'\n              color='dark'\n              onClick={() => setIsOpen(false)}\n            >\n              close\n              <IonIcon slot='end' icon={closeOutline} />\n            </IonButton>\n          </IonButtons>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent color='secondary'>\n        <IonGrid>\n          <IonRow>\n            <IonCol>\n              <IonItem color='dark'>\n                <IonAvatar slot='start'>\n                  <IonImg src={epi.feedImage} />\n                </IonAvatar>\n                <IonLabel className='ion-text-wrap'>\n                  <p>{podTitle}</p>\n                  <h2>{epi?.title}</h2>\n                  <h3>{epi?.datePublishedPretty}</h3>\n                  {epi?.duration > 0 && (\n                    <p>{parseSecondsIntoReadableTime(epi?.duration)}</p>\n                  )}\n                </IonLabel>\n                <IonIcon\n                  slot='end'\n                  button\n                  icon={playOutline}\n                  onClick={() => buttonHandler(idx)}\n                />\n              </IonItem>\n            </IonCol>\n          </IonRow>\n          <IonRow className='ion-padding '>\n            <IonCol>{parse(epi?.description)}</IonCol>\n          </IonRow>\n        </IonGrid>\n      </IonContent>\n    </IonModal>\n  );\n};\n\nexport default React.memo(EpisodeModal);\n","import { lazy } from 'react';\nimport {\n  IonAvatar,\n  IonButton,\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonIcon,\n  IonImg,\n  IonItem,\n  IonLabel,\n  IonModal,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n} from '@ionic/react';\nimport { playOutline } from 'ionicons/icons';\nimport React from 'react';\n\nexport function parseSecondsIntoReadableTime(milliseconds) {\n  //Get hours from seconds\n  const hours = milliseconds / (60 * 60);\n  const absoluteHours = Math.floor(hours);\n  const h = absoluteHours > 9 ? absoluteHours : '0' + absoluteHours;\n\n  //Get remainder from hours and convert to minutes\n  const minutes = (hours - absoluteHours) * 60;\n  const absoluteMinutes = Math.floor(minutes);\n  const m = absoluteMinutes > 9 ? absoluteMinutes : '0' + absoluteMinutes;\n\n  //Get remainder from minutes and convert to seconds\n  const seconds = (minutes - absoluteMinutes) * 60;\n  const absoluteSeconds = Math.floor(seconds);\n  const s = absoluteSeconds > 9 ? absoluteSeconds : '0' + absoluteSeconds;\n\n  return h + ':' + m + ':' + s;\n}\n\nconst Episodes = ({ epi, buttonHandler, idx, clickHandler }) => {\n  if (epi) {\n    return (\n      <>\n        <IonItem color='dark' button={true}>\n          <IonAvatar slot='start'>\n            <IonImg src={epi.feedImage} alt='podcast photo' />\n          </IonAvatar>\n          <IonLabel\n            className='ion-text-wrap'\n            onClick={() => clickHandler(epi, idx)}\n          >\n            <h2>{epi.title}</h2>\n            <h3>{epi.datePublishedPretty}</h3>\n            {epi.duration > 0 && (\n              <p>{parseSecondsIntoReadableTime(epi.duration)}</p>\n            )}\n          </IonLabel>\n          <IonIcon\n            slot='end'\n            button\n            icon={playOutline}\n            onClick={() => buttonHandler(idx)}\n          />\n        </IonItem>\n      </>\n    );\n  } else return <></>;\n};\n\nexport default React.memo(Episodes);\n","import {\n  IonBackButton,\n  IonButtons,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonHeader,\n  IonIcon,\n  IonInfiniteScroll,\n  IonInfiniteScrollContent,\n  IonList,\n  IonListHeader,\n  IonLoading,\n  IonMenuButton,\n  IonPage,\n  IonRow,\n  IonTitle,\n  IonToolbar,\n  useIonViewWillEnter,\n} from '@ionic/react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { addCircle, addCircleOutline } from 'ionicons/icons';\nimport { useDispatch } from 'react-redux';\nimport { playPodcast } from '../store/podcastInfoSlice';\nimport { useSelector } from 'react-redux';\nimport Card from '../components/Card';\nimport Episodes from '../components/Episodes';\nimport EpisodeModal from '../components/EpisodeModal';\nimport { addToFavorites } from '../store/local-storage';\nimport { sendPodcastData } from '../store/selectedPodcast';\n\nconst PodcastInfo = () => {\n  const { podcastId } = useParams();\n  const podInfo = useSelector((state) => state.podcastInfo);\n  const podList = useSelector((state) => state.localStore.podcastsRdx);\n  const selectedPodcast = useSelector((state) => state.selected);\n  const [isOpen, setIsOpen] = useState(false);\n  const [favorite, setFavorite] = useState();\n  const [loading, setLoading] = useState(true);\n  const [visibleEpi, setVisibleEpi] = useState([]);\n  const [isInfiniteDisabled, setInfiniteDisabled] = useState(false);\n\n  const modalRef = useRef();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const getPodcastInfo = async () => {\n      await dispatch(sendPodcastData(podcastId));\n    };\n    getPodcastInfo();\n\n    return () => {\n      setFavorite(false);\n      setLoading(true);\n      setVisibleEpi([]);\n    };\n  }, [podcastId, dispatch]);\n\n  useEffect(() => {\n    try {\n      setFavorite(!!podList[podcastId]);\n    } catch (error) {}\n\n    setVisibleEpi(selectedPodcast.episodes.slice(0, 10));\n    if (loading) {\n      setLoading(false);\n    }\n  }, [selectedPodcast]);\n\n  const buttonHandler = (idx) => {\n    const episode = selectedPodcast.episodes[idx];\n    dispatch(playPodcast(selectedPodcast.podcast, episode, podInfo.count));\n  };\n\n  const clickHandler = (epi, idx) => {\n    setIsOpen((prev) => !prev);\n    modalRef.current = {\n      epi: epi,\n      idx: idx,\n      podTitle: selectedPodcast.podcast.title,\n    };\n  };\n\n  const addPodcast = async () => {\n    const podcastList = { ...podList };\n    dispatch(addToFavorites(podcastList, favorite, selectedPodcast.podcast));\n    setFavorite((prev) => !prev);\n  };\n\n  let data;\n  if (selectedPodcast.episodes.length > 0) {\n    data = [...selectedPodcast.episodes];\n  }\n\n  const pushData = () => {\n    const max = visibleEpi.length + 10;\n    const min = max - 10;\n    const newData = [];\n    for (let i = min; i < max; i++) {\n      try {\n        newData.push(data[i]);\n      } catch (error) {}\n    }\n    setVisibleEpi((prev) => [...prev, ...newData]);\n  };\n\n  const loadData = (ev) => {\n    setTimeout(() => {\n      pushData();\n      ev.target.complete();\n      if (visibleEpi.length === selectedPodcast.episodes.length) {\n        setInfiniteDisabled(true);\n      }\n    }, 200);\n  };\n\n  useIonViewWillEnter(() => {\n    pushData();\n  });\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar color='primary' className='ion-text-center'>\n          <IonButtons slot='start'>\n            <IonMenuButton />\n            <IonBackButton defaultHref='/search' />\n          </IonButtons>\n          <IonButtons slot='end'>\n            <IonIcon\n              icon={favorite ? addCircle : addCircleOutline}\n              size='large'\n              style={{ marginRight: '1rem' }}\n              onClick={addPodcast}\n            />\n          </IonButtons>\n          <IonTitle>\n            {selectedPodcast.podcast ? selectedPodcast.podcast.title : ''}\n          </IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent color='secondary'>\n        {loading && (\n          <IonLoading\n            isOpen={loading}\n            onDidDismiss={() => setLoading(false)}\n            message={'Loading...'}\n            duration={5000}\n          />\n        )}\n        {!loading && (\n          <IonGrid>\n            {selectedPodcast.podcast.length !== 0 && (\n              <IonRow>\n                <IonCol className='ion-no-padding' sizeSm='6' offsetSm='3'>\n                  <Card podcast={selectedPodcast.podcast} />\n                </IonCol>\n              </IonRow>\n            )}\n            {selectedPodcast.episodes.length !== 0 && (\n              <IonRow>\n                <IonCol sizeSm='9' offsetSm='1.5'>\n                  <IonList className='ion-no-padding'>\n                    <IonListHeader color='dark'>\n                      <h1 className='ion-text-center'>Episodes</h1>\n                    </IonListHeader>\n                    {visibleEpi.map((epi, idx) => (\n                      <Episodes\n                        key={idx}\n                        epi={epi}\n                        buttonHandler={buttonHandler}\n                        idx={idx}\n                        clickHandler={clickHandler}\n                      />\n                    ))}\n                  </IonList>\n                </IonCol>\n              </IonRow>\n            )}\n            <IonInfiniteScroll\n              onIonInfinite={loadData}\n              threshold='300px'\n              disabled={isInfiniteDisabled}\n            >\n              <IonInfiniteScrollContent\n                loadingSpinner='bubbles'\n                loadingText='Loading more data...'\n              />\n            </IonInfiniteScroll>\n            <EpisodeModal\n              isOpen={isOpen}\n              modalInfo={modalRef.current}\n              setIsOpen={setIsOpen}\n              buttonHandler={buttonHandler}\n            />\n          </IonGrid>\n        )}\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default React.memo(PodcastInfo);\n"],"names":["EpisodeModal","isOpen","setIsOpen","buttonHandler","modalInfo","epi","idx","podTitle","onDidDismiss","color","title","slot","fill","onClick","icon","closeOutline","src","feedImage","className","datePublishedPretty","duration","parseSecondsIntoReadableTime","button","playOutline","parse","description","React","milliseconds","hours","absoluteHours","Math","floor","h","minutes","absoluteMinutes","m","seconds","absoluteSeconds","Episodes","clickHandler","alt","PodcastInfo","podcastId","useParams","podInfo","useSelector","state","podcastInfo","podList","localStore","podcastsRdx","selectedPodcast","selected","useState","favorite","setFavorite","loading","setLoading","visibleEpi","setVisibleEpi","isInfiniteDisabled","setInfiniteDisabled","modalRef","useRef","dispatch","useDispatch","useEffect","getPodcastInfo","sendPodcastData","error","episodes","slice","data","episode","playPodcast","podcast","count","prev","current","addPodcast","podcastList","addToFavorites","length","pushData","max","newData","i","push","useIonViewWillEnter","defaultHref","addCircle","addCircleOutline","size","style","marginRight","message","sizeSm","offsetSm","map","onIonInfinite","ev","setTimeout","target","complete","threshold","disabled","loadingSpinner","loadingText"],"sourceRoot":""}